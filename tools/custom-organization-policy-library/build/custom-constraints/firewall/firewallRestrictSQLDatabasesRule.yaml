#@ load("/constraints.lib.star", "build_constraint")
#@ constraint = build_constraint("firewallRestrictSQLDatabasesRule")

#@ def condition(allowed_source_ranges):
#@   #! SQL Relational Databases
#@   #! MySQL: TCP 3306
#@   #! Oracle: TCP 1521, 2483-2484; UDP 2483-2484
#@   #! PostgreSQL: TCP/UDP 5432
#@   #! Deny unless every source range is explicitly allow-listed
#@   sanitized_allowed_ranges = [rng for rng in allowed_source_ranges if rng] or []
#@
#@   lines = [
#@     "resource.direction.matches('INGRESS') &&",
#@     "  !resource.sourceRanges.all(range,",
#@     "      range in " + str(sanitized_allowed_ranges),
#@     "  ) &&",
#@     "  resource.allowed.exists(rule,",
#@     "    rule.ports.exists(port,",
#@     "        rule.IPProtocol == 'tcp' && port in ['3306', '1521', '2483', '2484', '5432'] ||",
#@     "        rule.IPProtocol == 'udp' && port in ['2483', '2484', '5432']",
#@     "    )",
#@     "  )"
#@   ]
#@   return "\n".join(lines)
#@ end

#@ def description():
#@   lines = [
#@     "Ensure that SQL database ports (MySQL, Oracle, PostgreSQL) are not accessible from the Internet when",
#@     "using VPC Firewall Rule",
#@   ]
#@   return "\n".join(lines)
#@ end

#@ if constraint.to_generate():
name: #@ constraint.constraint_name()
resource_types:
- compute.googleapis.com/Firewall
condition: #@ condition(constraint.params().allowed_source_ranges)
action_type: DENY
method_types:
- CREATE
- UPDATE
display_name: Restrict VPC Firewall rules allowing SQL database port access from the Internet
description: #@ description()
#@ end
