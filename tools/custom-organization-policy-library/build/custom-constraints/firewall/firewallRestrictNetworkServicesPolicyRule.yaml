#@ load("/constraints.lib.star", "build_constraint")
#@ constraint = build_constraint("firewallRestrictNetworkServicesPolicyRule")

#@ def condition(allowed_source_ranges):
#@   #! Core network infrastructure protocols
#@   #! DNS: TCP/UDP:53
#@   #! NetBIOS: TCP/UDP:137-139
#@   #! Deny unless every source IP range is explicitly allow-listed
#@   #! Using flattened structure to avoid CEL recursion depth limit (5)
#@   sanitized_allowed_ranges = [rng for rng in allowed_source_ranges if rng] or []
#@   tcp_ports = "port == '53' || port == '137' || port == '138' || port == '139'"
#@   udp_ports = "port == '53' || port == '137' || port == '138' || port == '139'"
#@
#@   lines = [
#@     "resource.rules.exists(rule,",
#@     "  rule.priority < 2147483644 &&",
#@     "  rule.direction == 'INGRESS' &&",
#@     "  !rule.match.srcIpRanges.all(ipRange,",
#@     "      ipRange in " + str(sanitized_allowed_ranges),
#@     "  ) &&",
#@     "  rule.match.layer4Configs.exists(l4config,",
#@     "    l4config.ipProtocol == 'tcp' &&",
#@     "    l4config.ports.exists(port, " + tcp_ports + ") ||",
#@     "    l4config.ipProtocol == 'udp' &&",
#@     "    l4config.ports.exists(port, " + udp_ports + ")",
#@     "  )",
#@     ")"
#@   ]
#@   return "\n".join(lines)
#@ end

#@ def description():
#@   lines = [
#@     "Ensure that network infrastructure services (DNS, NetBIOS) are not accessible from the Internet when",
#@     "using Firewall Policy Rule",
#@   ]
#@   return "\n".join(lines)
#@ end

#@ if constraint.to_generate():
name: #@ constraint.constraint_name()
resource_types:
- compute.googleapis.com/FirewallPolicy
condition: #@ condition(constraint.params().allowed_source_ranges)
action_type: DENY
method_types:
- CREATE
- UPDATE
display_name: Restrict Firewall Policy rules allowing network service access from the Internet
description: #@ description()
#@ end
