#@ load("/constraints.lib.star", "build_constraint")
#@ constraint = build_constraint("firewallRestrictInsecureProtocolsRule")

#@ def condition(allowed_source_ranges):
#@   #! Insecure legacy protocols that should not be exposed to the Internet
#@   #! Telnet: TCP:23 (unencrypted remote access)
#@   #! FTP: TCP:21 (unencrypted file transfer)
#@   #! HTTP: TCP:80 (unencrypted web traffic)
#@   #! Deny unless every source range is explicitly allow-listed
#@   sanitized_allowed_ranges = [rng for rng in allowed_source_ranges if rng] or []
#@
#@   lines = [
#@     "resource.direction.matches('INGRESS') &&",
#@     "  !resource.sourceRanges.all(range,",
#@     "      range in " + str(sanitized_allowed_ranges),
#@     "  ) &&",
#@     "  resource.allowed.exists(rule,",
#@     "    rule.ports.exists(port,",
#@     "        rule.IPProtocol == 'tcp' && port in ['21', '23', '80']",
#@     "    )",
#@     "  )"
#@   ]
#@   return "\n".join(lines)
#@ end

#@ def description():
#@   lines = [
#@     "Ensure that insecure legacy protocols (Telnet, FTP, HTTP) are not accessible from the Internet when",
#@     "using VPC Firewall Rule",
#@   ]
#@   return "\n".join(lines)
#@ end

#@ if constraint.to_generate():
name: #@ constraint.constraint_name()
resource_types:
- compute.googleapis.com/Firewall
condition: #@ condition(constraint.params().allowed_source_ranges)
action_type: DENY
method_types:
- CREATE
- UPDATE
display_name: Restrict VPC Firewall rules allowing insecure protocol access from the Internet
description: #@ description()
#@ end
