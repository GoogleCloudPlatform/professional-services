#@ load("/constraints.lib.star", "build_constraint")
#@ constraint = build_constraint("firewallRestrictOpenFirewallPolicyRule")

#@ def condition():
#@   #! OPEN_FIREWALL finding: Disallow all TCP/UDP ports
#@   #! Simplified to avoid CEL recursion depth (max 5)
#@   #! Only checks for missing/empty ports (most common "all ports" case)
#@   lines = [
#@     "resource.rules.exists(rule,",
#@     "  rule.priority < 2147483644 &&",
#@     "  rule.direction == 'INGRESS' &&",
#@     "  rule.match.layer4Configs.exists(l4,",
#@     "    (l4.ipProtocol == 'tcp' || l4.ipProtocol == 'udp') &&",
#@     "    (!has(l4.ports) || size(l4.ports) == 0)",
#@     "  )",
#@     ")"
#@   ]
#@   return "\n".join(lines)
#@ end
#@
#@ def description():
#@   lines = [
#@     "Prevent Firewall Policy rules that are open to 0.0.0.0/0",
#@     "(except ICMP, TCP:22/TCP:443/TCP:3389/UDP:3389/SCTP:22) or that allow all TCP/UDP ports",
#@     "from non-private IPs"
#@   ]
#@   return "\n".join(lines)
#@ end

#@ if constraint.to_generate():
name: #@ constraint.constraint_name()
resource_types:
- compute.googleapis.com/FirewallPolicy
condition: #@ condition()
action_type: DENY
method_types:
- CREATE
- UPDATE
display_name: Restrict overly permissive Firewall Policy rules open to the Internet
description: #@ description()
#@ end
