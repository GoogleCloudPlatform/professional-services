#@ load("/constraints.lib.star", "build_constraint")
#@ constraint = build_constraint("firewallRestrictCacheSearchDatabasesPolicyRule")

#@ def condition(allowed_source_ranges):
#@   #! Cache and Search Systems
#@   #! Elasticsearch: TCP 9200, 9300
#@   #! Memcached: TCP/UDP 11211, 11214-11215
#@   #! Redis: TCP 6379
#@   #! Simplified to avoid CEL recursion depth limit (5)
#@   #! Check for source range 0.0.0.0/0 instead of allow-list
#@   #! Use individual port checks instead of 'in' operator
#@   port_checks = "port == '9200' || port == '9300' || port == '11211'"
#@   port_checks2 = "|| port == '11214' || port == '11215' || port == '6379'"
#@
#@   lines = [
#@     "resource.rules.exists(rule,",
#@     "  rule.priority < 2147483644 &&",
#@     "  rule.direction == 'INGRESS' &&",
#@     "  rule.match.srcIpRanges.exists(range, range == '0.0.0.0/0') &&",
#@     "  rule.match.layer4Configs.exists(l4config,",
#@     "    (l4config.ipProtocol == 'tcp' || l4config.ipProtocol == 'udp') &&",
#@     "    l4config.ports.exists(port,",
#@     "      " + port_checks,
#@     "      " + port_checks2,
#@     "    )",
#@     "  )",
#@     ")"
#@   ]
#@   return "\n".join(lines)
#@ end

#@ def description():
#@   lines = [
#@     "Ensure that cache and search database ports (Elasticsearch, Memcached, Redis) are not accessible",
#@     "from the Internet when using Firewall Policy Rule",
#@   ]
#@   return "\n".join(lines)
#@ end

#@ if constraint.to_generate():
name: #@ constraint.constraint_name()
resource_types:
- compute.googleapis.com/FirewallPolicy
condition: #@ condition(constraint.params().allowed_source_ranges)
action_type: DENY
method_types:
- CREATE
- UPDATE
display_name: Restrict Firewall Policy rules allowing cache/search database port access from the Internet
description: #@ description()
#@ end
